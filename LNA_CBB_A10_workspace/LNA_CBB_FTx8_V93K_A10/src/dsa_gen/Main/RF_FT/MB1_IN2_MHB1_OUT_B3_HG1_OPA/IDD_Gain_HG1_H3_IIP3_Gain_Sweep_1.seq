/* ---------------------------------------------------------------------------*
 * 
 * This file was automatically generated by the SmarTest Device Setup API.
 * 
 * The contents of this file are generated by a combination of the 
 * test method code as well as the testflow file being used. In the 
 * SmarTest Work Center, you can navigate to the generating source 
 * by holding down the CTRL+ALT+R keys when your cursor is positioned 
 * over either of these two file paths listed below:
 * 
 *   1. The test method location which resulted in the creation of this file:
 *      src/rf2rf_tml/RF2RFBurst_TEST.java:193
 * 
 *   2. The testflow file which contains the used test suite and parameter
 *      settings:
 *      LNA/testflows/RF_FT.flow
 * 
 *      The name of the test suite is: Main.RF_FT.MB1_IN2_MHB1_OUT_B3_HG1_OPA
 * 
 * This file is not intended to be modified. Do not make changes
 * to this file as your changes may be overwritten when the
 * generating code is executed again!
 *
 * ---------------------------------------------------------------------------*/
sequence IDD_Gain_HG1_H3_IIP3_Gain_Sweep_1 uses dsa_gen.Main.RF_FT.MB1_IN2_MHB1_OUT_B3_HG1_OPA.IDD_Gain_HG1_H3_IIP3_Gain_Sweep_1
{
    sequential _seq_1
    {
        parallel _par_1
        {
            //IDD: Register configure
            sequential _seq_1
            {
                transactSeqCall _call_TS_Setup_IDD_trSeq_1;
            }
        }
    
        parallel _par_2
        {
            //IDD: No STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_IDD_Off ;
            }
        
            //IDD: MEAS
            sequential _seq_2
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_IDD ;
            }
        }
        patternCall setups.vectors.SWITCH.MB1IN2_MHB1OUT_SWITCH ;
    
        parallel _par_3
        {
            //Gain_HG1: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_Gain_HG1 ;
            }
        
            //Gain_HG1: MEAS
            sequential _seq_2
            {
                wait 1.000 ms;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_Gain_HG1 ;
            }
        }
    
        parallel _par_4
        {
            //H3: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_H3 ;
            }
        
            //H3: MEAS
            sequential _seq_2
            {
                wait 800.0000 us;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_H3 ;
            }
        }
    
        parallel _par_5
        {
            //IIP3: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_IIP3 ;
            }
        
            //IIP3: MEAS
            sequential _seq_2
            {
                wait 1.000 ms;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_IIP3_I2 ;
            }
        }
    
        parallel _par_6
        {
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_IIP3_Off ;
            }
        }
    
        parallel _par_7
        {
            //Gain_Sweep1: Register configure
            sequential _seq_1
            {
                transactSeqCall _call_TS_Setup_Gain_Sweep1_trSeq_2;
            }
        }
    
        parallel _par_8
        {
            //Gain_Sweep1: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_Gain_Sweep1 ;
            }
        
            //Gain_Sweep1: MEAS
            sequential _seq_2
            {
                wait 1.000 ms;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_Gain_Sweep1 ;
            }
        }
    
        parallel _par_9
        {
            //Gain_Sweep2: Register configure
            sequential _seq_1
            {
                transactSeqCall _call_TS_Setup_Gain_Sweep2_trSeq_3;
            }
        }
    
        parallel _par_10
        {
            //Gain_Sweep2: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_Gain_Sweep2 ;
            }
        
            //Gain_Sweep2: MEAS
            sequential _seq_2
            {
                wait 1.000 ms;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_Gain_Sweep2 ;
            }
        }
    
        parallel _par_11
        {
            //Gain_Sweep3: Register configure
            sequential _seq_1
            {
                transactSeqCall _call_TS_Setup_Gain_Sweep3_trSeq_4;
            }
        }
    
        parallel _par_12
        {
            //Gain_Sweep3: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_Gain_Sweep3 ;
            }
        
            //Gain_Sweep3: MEAS
            sequential _seq_2
            {
                wait 1.000 ms;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_Gain_Sweep3 ;
            }
        }
    
        parallel _par_13
        {
            //Gain_Sweep4: Register configure
            sequential _seq_1
            {
                transactSeqCall _call_TS_Setup_Gain_Sweep4_trSeq_5;
            }
        }
    
        parallel _par_14
        {
            //Gain_Sweep4: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_Gain_Sweep4 ;
            }
        
            //Gain_Sweep4: MEAS
            sequential _seq_2
            {
                wait 1.000 ms;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_Gain_Sweep4 ;
            }
        }
    
        parallel _par_15
        {
            //Gain_Sweep5: Register configure
            sequential _seq_1
            {
                transactSeqCall _call_TS_Setup_Gain_Sweep5_trSeq_6;
            }
        }
    
        parallel _par_16
        {
            //Gain_Sweep5: STIM
            sequential _seq_1
            {
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Stim_Gain_Sweep5 ;
            }
        
            //Gain_Sweep5: MEAS
            sequential _seq_2
            {
                wait 1.000 ms;
                actionCall MB1_IN2_MHB1_OUT_B3_HG1_OPA_Meas_Gain_Sweep5 ;
                transactSeqCall _call_TS_ReSet_Gain_Sweep5_trSeq_7;
            }
        }
    }
}
